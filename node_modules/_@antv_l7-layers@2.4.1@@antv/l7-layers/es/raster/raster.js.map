{"version":3,"sources":["../../src/raster/raster.ts"],"names":["gl","generateColorRamp","BaseLayer","RasterTriangulation","RasterLayer","type","rasterTexture","colorTexture","parserDataItem","getSource","data","dataArray","createTexture2D","rendererService","width","height","format","LUMINANCE","FLOAT","aniso","getLayerConfig","rampColors","imageData","flipY","models","buildRasterModel","opacity","heightRatio","coordinates","min","max","forEach","model","draw","uniforms","u_opacity","u_texture","u_min","u_width","u_height","u_max","u_heightRatio","u_colorTexture","u_extent","properties","minimum","maximum","source","sourceFeature","triangulation","shaderModuleService","registerModule","vs","rasterVert","fs","rasterFrag","getModule","createAttribute","createElements","createBuffer","createModel","attributes","a_Position","buffer","vertices","size","primitive","TRIANGLES","depth","enable","elements","indices","UNSIGNED_INT","count","length"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IModelUniform,\n  IRasterParserDataItem,\n  IStyleAttributeService,\n  ITexture2D,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\n\nimport { generateColorRamp, IColorRamp } from '@antv/l7-utils';\nimport BaseLayer from '../core/BaseLayer';\nimport { RasterTriangulation } from './buffers/triangulation';\nimport rasterFrag from './shaders/raster_frag.glsl';\nimport rasterVert from './shaders/raster_vert.glsl';\ninterface IRasterLayerStyleOptions {\n  opacity: number;\n  min: number;\n  max: number;\n  extent: [number, number, number, number];\n  rampColors: IColorRamp;\n  heightRatio: number;\n}\n\nexport default class RasterLayer extends BaseLayer<IRasterLayerStyleOptions> {\n  public type: string = 'RasterLayer';\n  protected rasterTexture: ITexture2D;\n  protected colorTexture: ITexture2D;\n\n  public getAnimateUniforms(): IModelUniform {\n    return {};\n  }\n\n  public buildModels() {\n    const parserDataItem = this.getSource().data.dataArray[0];\n    const { createTexture2D } = this.rendererService;\n    this.rasterTexture = createTexture2D({\n      data: parserDataItem.data,\n      width: parserDataItem.width,\n      height: parserDataItem.height,\n      format: gl.LUMINANCE,\n      type: gl.FLOAT,\n      aniso: 4,\n    });\n    const { rampColors } = this.getLayerConfig();\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    this.colorTexture = createTexture2D({\n      data: imageData.data,\n      width: imageData.width,\n      height: imageData.height,\n      flipY: false,\n    });\n    this.models = [this.buildRasterModel()];\n  }\n  public renderModels() {\n    const { opacity, heightRatio = 10 } = this.getLayerConfig();\n    const parserDataItem = this.getSource().data.dataArray[0];\n    const { coordinates, width, height, min, max } = parserDataItem;\n    this.models.forEach((model) =>\n      model.draw({\n        uniforms: {\n          u_opacity: opacity || 1,\n          u_texture: this.rasterTexture,\n          u_min: min,\n          u_width: width,\n          u_height: height,\n          u_max: max,\n          u_heightRatio: heightRatio,\n          u_colorTexture: this.colorTexture,\n          u_extent: [...coordinates[0], ...coordinates[1]],\n        },\n      }),\n    );\n\n    return this;\n  }\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  private buildRasterModel() {\n    const source = this.getSource();\n    const sourceFeature = source.data.dataArray[0];\n    const triangulation = RasterTriangulation(sourceFeature);\n    this.shaderModuleService.registerModule('raster', {\n      vs: rasterVert,\n      fs: rasterFrag,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule('raster');\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel,\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: triangulation.vertices,\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      primitive: gl.TRIANGLES,\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: true,\n      },\n      elements: createElements({\n        data: triangulation.indices,\n        type: gl.UNSIGNED_INT,\n        count: triangulation.indices.length,\n      }),\n    });\n  }\n}\n"],"file":"raster.js"}