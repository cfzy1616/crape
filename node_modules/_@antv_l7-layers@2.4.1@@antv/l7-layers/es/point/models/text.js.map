{"version":3,"sources":["../../../src/point/models/text.ts"],"names":["AttributeType","gl","boundsContains","padBounds","rgb2arr","BaseModel","CollisionIndex","calculteCentroid","getGlyphQuads","shapeText","TextTriangulation","feature","that","id","vertices","indices","glyphInfoMap","size","centroid","coord","length","glyphQuads","forEach","quad","index","push","tex","x","y","height","tl","width","tr","br","bl","TextModel","glyphInfo","texture","currentZoom","extent","textureHeight","textCount","preTextStyle","buildModels","initGlyph","updateTexture","filterGlyphs","layer","buildLayerModel","moduleName","vertexShader","textVert","fragmentShader","textFrag","triangulation","bind","depth","enable","blend","getBlend","getLayerConfig","opacity","stroke","strokeWidth","strokeOpacity","textAnchor","textAllowOverlap","halo","gamma","fontService","canvas","mapping","Object","keys","u_opacity","u_stroke_opacity","u_sdf_map","u_stroke","u_halo_blur","u_gamma_scale","u_sdf_map_size","u_strokeWidth","on","textExtent","zoom","mapService","getZoom","getBounds","flag","Math","abs","reBuildModel","off","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","data","FLOAT","update","featureIdx","vertex","attributeIdx","rotate","Array","isArray","STATIC_DRAW","bounds","fontWeight","fontFamily","getEncodedData","characterSet","item","shape","toString","char","indexOf","setFontOptions","iconfont","spacing","textOffset","map","shaping","coordinates","originCentroid","version","originCoordinates","padding","rendererService","getViewportSize","collisionIndex","filterData","filter","fontScale","pixels","lngLatToContainer","placeCollisionBox","x1","left","x2","right","y1","top","y2","bottom","anchorPointX","anchorPointY","box","insertCollisionBox","initIconFontTex","initTextFont","generateGlyphLayout","createTexture2D","destroy","mag","LINEAR","min","models"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  BlendType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { boundsContains, padBounds, rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport CollisionIndex from '../../utils/collision-index';\nimport { calculteCentroid } from '../../utils/geo';\nimport {\n  anchorType,\n  getGlyphQuads,\n  IGlyphQuad,\n  shapeText,\n} from '../../utils/symbol-layout';\nimport textFrag from '../shaders/text_frag.glsl';\nimport textVert from '../shaders/text_vert.glsl';\ninterface IPointTextLayerStyleOptions {\n  opacity: number;\n  textAnchor: anchorType;\n  spacing: number;\n  padding: [number, number];\n  stroke: string;\n  halo: number;\n  gamma: number;\n  strokeWidth: number;\n  strokeOpacity: number;\n  fontWeight: string;\n  fontFamily: string;\n  textOffset: [number, number];\n  textAllowOverlap: boolean;\n}\nexport function TextTriangulation(feature: IEncodeFeature) {\n  // @ts-ignore\n  const that = this as TextModel;\n  const id = feature.id as number;\n  const vertices: number[] = [];\n  const indices: number[] = [];\n\n  if (!that.glyphInfoMap || !that.glyphInfoMap[id]) {\n    return {\n      vertices: [], // [ x, y, z, tex.x,tex.y, offset.x. offset.y]\n      indices: [],\n      size: 7,\n    };\n  }\n  const centroid = that.glyphInfoMap[id].centroid as number[]; // 计算中心点\n  const coord =\n    centroid.length === 2 ? [centroid[0], centroid[1], 0] : centroid;\n  that.glyphInfoMap[id].glyphQuads.forEach(\n    (quad: IGlyphQuad, index: number) => {\n      vertices.push(\n        ...coord,\n        quad.tex.x,\n        quad.tex.y + quad.tex.height,\n        quad.tl.x,\n        quad.tl.y,\n        ...coord,\n        quad.tex.x + quad.tex.width,\n        quad.tex.y + quad.tex.height,\n        quad.tr.x,\n        quad.tr.y,\n        ...coord,\n        quad.tex.x + quad.tex.width,\n        quad.tex.y,\n        quad.br.x,\n        quad.br.y,\n        ...coord,\n        quad.tex.x,\n        quad.tex.y,\n        quad.bl.x,\n        quad.bl.y,\n      );\n      indices.push(\n        0 + index * 4,\n        1 + index * 4,\n        2 + index * 4,\n        2 + index * 4,\n        3 + index * 4,\n        0 + index * 4,\n      );\n    },\n  );\n  return {\n    vertices, // [ x, y, z, tex.x,tex.y, offset.x. offset.y]\n    indices,\n    size: 7,\n  };\n}\n\nexport default class TextModel extends BaseModel {\n  public glyphInfo: IEncodeFeature[];\n  public glyphInfoMap: {\n    [key: string]: {\n      shaping: any;\n      glyphQuads: IGlyphQuad[];\n      centroid: number[];\n    };\n  } = {};\n  private texture: ITexture2D;\n  private currentZoom: number = -1;\n  private extent: [[number, number], [number, number]];\n  private textureHeight: number = 0;\n  private textCount: number = 0;\n  private preTextStyle: Partial<IPointTextLayerStyleOptions> = {};\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1.0,\n      stroke = '#fff',\n      strokeWidth = 0,\n      strokeOpacity = 1,\n      textAnchor = 'center',\n      textAllowOverlap = false,\n      halo = 0.5,\n      gamma = 2.0,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    const { canvas, mapping } = this.fontService;\n    if (Object.keys(mapping).length !== this.textCount) {\n      this.updateTexture();\n      this.textCount = Object.keys(mapping).length;\n    }\n    this.preTextStyle = {\n      textAnchor,\n      textAllowOverlap,\n    };\n    return {\n      u_opacity: opacity,\n      u_stroke_opacity: strokeOpacity,\n      u_sdf_map: this.texture,\n      u_stroke: rgb2arr(stroke),\n      u_halo_blur: halo,\n      u_gamma_scale: gamma,\n      u_sdf_map_size: [canvas.width, canvas.height],\n      u_strokeWidth: strokeWidth,\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.layer.on('remapping', this.buildModels);\n    this.extent = this.textExtent();\n    const {\n      textAnchor = 'center',\n      textAllowOverlap = true,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    this.preTextStyle = {\n      textAnchor,\n      textAllowOverlap,\n    };\n    return this.buildModels();\n  }\n\n  public buildModels = () => {\n    this.initGlyph();\n    this.updateTexture();\n    this.filterGlyphs();\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(this),\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  };\n  public needUpdate() {\n    const {\n      textAllowOverlap = false,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    // textAllowOverlap 发生改变\n    const zoom = this.mapService.getZoom();\n    const extent = this.mapService.getBounds();\n    const flag = boundsContains(this.extent, extent);\n    // 文本不能压盖则进行过滤\n    if (\n      (!textAllowOverlap && (Math.abs(this.currentZoom - zoom) > 1 || !flag)) ||\n      textAllowOverlap !== this.preTextStyle.textAllowOverlap\n    ) {\n      this.reBuildModel();\n      return true;\n    }\n    return false;\n  }\n\n  public clearModels() {\n    this.layer.off('remapping', this.buildModels);\n  }\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'rotate',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Rotate',\n        buffer: {\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { rotate = 0 } = feature;\n          return Array.isArray(rotate) ? [rotate[0]] : [rotate as number];\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'textOffsets',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_textOffsets',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[5], vertex[6]];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 12 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'textUv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_tex',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n  private textExtent(): [[number, number], [number, number]] {\n    const bounds = this.mapService.getBounds();\n    return padBounds(bounds, 0.5);\n  }\n  /**\n   * 生成文字纹理（生成文字纹理字典）\n   */\n  private initTextFont() {\n    const {\n      fontWeight = '400',\n      fontFamily = 'sans-serif',\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n    const characterSet: string[] = [];\n    data.forEach((item: IEncodeFeature) => {\n      let { shape = '' } = item;\n      shape = shape.toString();\n      for (const char of shape) {\n        // 去重\n        if (characterSet.indexOf(char) === -1) {\n          characterSet.push(char);\n        }\n      }\n    });\n    this.fontService.setFontOptions({\n      characterSet,\n      fontWeight,\n      fontFamily,\n      iconfont: false,\n    });\n  }\n\n  /**\n   * 生成 iconfont 纹理字典\n   */\n  private initIconFontTex() {\n    const {\n      fontWeight = '400',\n      fontFamily = 'sans-serif',\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n    const characterSet: string[] = [];\n    data.forEach((item: IEncodeFeature) => {\n      let { shape = '' } = item;\n      shape = shape.toString();\n      if (characterSet.indexOf(shape) === -1) {\n        characterSet.push(shape);\n      }\n    });\n    this.fontService.setFontOptions({\n      characterSet,\n      fontWeight,\n      fontFamily,\n      iconfont: true,\n    });\n  }\n\n  /**\n   * 生成文字布局（对照文字纹理字典提取对应文字的位置很好信息）\n   */\n  private generateGlyphLayout(iconfont: boolean) {\n    // TODO:更新文字布局\n    const { mapping } = this.fontService;\n    const {\n      spacing = 2,\n      textAnchor = 'center',\n      textOffset,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    const data = this.layer.getEncodedData();\n    this.glyphInfo = data.map((feature: IEncodeFeature) => {\n      const { shape = '', id, size = 1 } = feature;\n\n      const shaping = shapeText(\n        shape.toString(),\n        mapping,\n        // @ts-ignore\n        size,\n        textAnchor,\n        'center',\n        spacing,\n        textOffset,\n        iconfont,\n      );\n      const glyphQuads = getGlyphQuads(shaping, textOffset, false);\n      feature.shaping = shaping;\n      feature.glyphQuads = glyphQuads;\n      // feature.centroid = calculteCentroid(coordinates);\n\n      feature.centroid = calculteCentroid(feature.coordinates);\n\n      // 此时地图高德2.0 originCentroid == centroid\n      feature.originCentroid =\n        feature.version === 'GAODE2.x'\n          ? calculteCentroid(feature.originCoordinates)\n          : (feature.originCentroid = feature.centroid);\n\n      this.glyphInfoMap[id as number] = {\n        shaping,\n        glyphQuads,\n        centroid: calculteCentroid(feature.coordinates),\n      };\n      return feature;\n    });\n  }\n  /**\n   * 文字避让 depend on originCentorid\n   */\n  private filterGlyphs() {\n    const {\n      padding = [4, 4],\n      textAllowOverlap = false,\n    } = this.layer.getLayerConfig() as IPointTextLayerStyleOptions;\n    if (textAllowOverlap) {\n      // 如果允许文本覆盖\n      // this.layer.setEncodedData(this.glyphInfo);\n      return;\n    }\n    this.glyphInfoMap = {};\n    this.currentZoom = this.mapService.getZoom();\n    this.extent = this.textExtent();\n    const { width, height } = this.rendererService.getViewportSize();\n    const collisionIndex = new CollisionIndex(width, height);\n    const filterData = this.glyphInfo.filter((feature: IEncodeFeature) => {\n      const { shaping, id = 0 } = feature;\n      // const centroid = feature.centroid as [number, number];\n      // const centroid = feature.originCentroid as [number, number];\n      const centroid = (feature.version === 'GAODE2.x'\n        ? feature.originCentroid\n        : feature.centroid) as [number, number];\n      const size = feature.size as number;\n      const fontScale: number = size / 24;\n      const pixels = this.mapService.lngLatToContainer(centroid);\n      const { box } = collisionIndex.placeCollisionBox({\n        x1: shaping.left * fontScale - padding[0],\n        x2: shaping.right * fontScale + padding[0],\n        y1: shaping.top * fontScale - padding[1],\n        y2: shaping.bottom * fontScale + padding[1],\n        anchorPointX: pixels.x,\n        anchorPointY: pixels.y,\n      });\n      if (box && box.length) {\n        // TODO：featureIndex\n        collisionIndex.insertCollisionBox(box, id);\n        return true;\n      } else {\n        return false;\n      }\n    });\n    filterData.forEach((item) => {\n      // @ts-ignore\n      this.glyphInfoMap[item.id as number] = item;\n    });\n    // this.layer.setEncodedData(filterData);\n  }\n  /**\n   * 初始化文字布局\n   */\n  private initGlyph() {\n    const { iconfont = false } = this.layer.getLayerConfig();\n    // 1.生成文字纹理（或是生成 iconfont）\n    iconfont ? this.initIconFontTex() : this.initTextFont();\n    // this.initTextFont();\n\n    // 2.生成文字布局\n    this.generateGlyphLayout(iconfont);\n  }\n  /**\n   * 更新文字纹理\n   */\n  private updateTexture() {\n    const { createTexture2D } = this.rendererService;\n    const { canvas } = this.fontService;\n    this.textureHeight = canvas.height;\n    if (this.texture) {\n      this.texture.destroy();\n    }\n    this.texture = createTexture2D({\n      data: canvas,\n      mag: gl.LINEAR,\n      min: gl.LINEAR,\n      width: canvas.width,\n      height: canvas.height,\n    });\n  }\n\n  private reBuildModel() {\n    this.filterGlyphs();\n    this.layer.models = [\n      this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(this),\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n}\n"],"file":"text.js"}