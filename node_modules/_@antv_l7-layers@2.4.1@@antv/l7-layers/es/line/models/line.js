import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { AttributeType, gl } from '@antv/l7-core';
import BaseModel from '../../core/BaseModel';
import { LineTriangulation } from '../../core/triangulation';
var line_frag = "#define LineTypeSolid 0.0\n#define LineTypeDash 1.0\n#define Animate 0.0\n#define LineTexture 1.0\nuniform float u_blur : 0.99;\nuniform float u_line_type: 0.0;\nuniform float u_opacity : 1.0;\nvarying vec4 v_color;\nvarying vec2 v_normal;\n\n// line texture\nuniform float u_line_texture;\nuniform sampler2D u_texture;\nuniform vec2 u_textSize;\n\n// dash\nuniform float u_dash_offset : 0.0;\nuniform float u_dash_ratio : 0.1;\nvarying float v_distance_ratio;\nvarying vec4 v_dash_array;\nvarying float v_side;\n\nvarying float v_distance;\nvarying vec2 v_offset;\nvarying float v_a;\nvarying float v_pixelLen;\nvarying vec2 v_iconMapUV;\nvarying float v_strokeWidth;\n\n#pragma include \"picking\"\n\nuniform float u_time;\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ]; // \u63A7\u5236\u8FD0\u52A8\n// [animate, duration, interval, trailLength],\nvoid main() {\n  float animateSpeed = 0.0; // \u8FD0\u52A8\u901F\u5EA6\n  gl_FragColor = v_color;\n  // anti-alias\n  // float blur = 1.0 - smoothstep(u_blur, 1., length(v_normal.xy));\n  gl_FragColor.a *= u_opacity; // \u5168\u5C40\u900F\u660E\u5EA6\n  if(u_aimate.x == Animate) {\n      animateSpeed = u_time / u_aimate.y;\n      float alpha =1.0 - fract( mod(1.0- v_distance_ratio, u_aimate.z)* (1.0/ u_aimate.z) + animateSpeed);\n      alpha = (alpha + u_aimate.w -1.0) / u_aimate.w;\n      alpha = smoothstep(0., 1., alpha);\n      gl_FragColor.a *= alpha;\n  }\n // dash line\n  if(u_line_type == LineTypeDash) {\n    float flag = 0.;\n    float dashLength = mod(v_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\n      flag = 1.;\n    }\n    gl_FragColor.a *=flag;\n    // gl_FragColor.a *=(1.0- step(v_dash_array.x, mod(v_distance_ratio, dashLength)));\n  }\n\n  if(u_line_texture == LineTexture) { // while load texture\n    float u = fract(mod(v_distance, v_pixelLen)/v_pixelLen - animateSpeed);\n    float v = length(v_offset)/(v_a*2.0);\n    v = max(smoothstep(0.95, 1.0, v), v);\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\n    // gl_FragColor = filterColor(gl_FragColor + texture2D(u_texture, vec2(u, v)));\n    gl_FragColor = filterColor(gl_FragColor + texture2D(u_texture, uv));\n  } else {\n    gl_FragColor = filterColor(gl_FragColor);\n  }\n  // gl_FragColor = filterColor(vec4(1.0, 0.0, 0.0, 1.0));\n \n  // float r = max(smoothstep( 0.95, 1.0, v_strokeWidth/(v_a*2.0)), v_strokeWidth/(v_a*2.0));\n  // if(rV < r || rV > 1.0 - r) {\n  //   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n  // } \n  // float v = length(v_offset)/(v_a*2.0);\n  // if(v > 0.9) {\n  //   gl_FragColor = vec4(0.17647, 0.43921568, 0.2, 1.0);\n  // } else if(v < 0.1) {\n  //   gl_FragColor = vec4(0.17647, 0.43921568, 0.2, 1.0);\n  // }\n\n  // gl_FragColor = filterColor(gl_FragColor);\n}\n";
var line_vert = "#define LineTypeSolid 0.0\n#define LineTypeDash 1.0\n#define Animate 0.0\n\nattribute float a_Miter;\nattribute vec4 a_Color;\nattribute vec2 a_Size;\nattribute vec3 a_Normal;\nattribute vec3 a_Position;\n\nattribute vec2 a_iconMapUV;\n\n// dash line\nattribute float a_Total_Distance;\nattribute float a_Distance;\n\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nuniform float u_line_type: 0.0;\nuniform vec4 u_dash_array: [10.0, 5., 0, 0];\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\nuniform float u_icon_step: 100;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvarying vec4 v_color;\nvarying vec4 v_dash_array;\nvarying vec2 v_normal;\nvarying float v_distance_ratio;\nvarying float v_side;\n\nvarying float v_distance;\nvarying vec2 v_offset;\nvarying float v_size;\nvarying float v_a;\nvarying float v_pixelLen;\nvarying vec2 v_iconMapUV;\n// varying float v_strokeWidth;\n\nvoid main() {\n  \n  v_iconMapUV = a_iconMapUV;\n  v_distance = a_Distance;\n  v_pixelLen = project_pixel(u_icon_step);\n\n  if(u_line_type == LineTypeDash) {\n    v_distance_ratio = a_Distance / a_Total_Distance;\n    // v_distance_ratio = 0.01;\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / a_Total_Distance;\n  }\n  if(u_aimate.x == Animate) {\n      v_distance_ratio = a_Distance / a_Total_Distance;\n  }\n  v_normal = vec2(reverse_offset_normal(a_Normal) * sign(a_Miter));\n\n\n  v_color = a_Color;\n  v_a = project_pixel(a_Size.x);\n\n  vec3 size = a_Miter * setPickingSize(a_Size.x) * reverse_offset_normal(a_Normal);\n\n  vec2 offset = project_pixel(size.xy);\n  // v_strokeWidth = project_pixel(2.0);\n\n  v_offset = offset + offset * sign(a_Miter);\n\n  v_side = a_Miter * a_Size.x;\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\n\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, a_Size.y, 1.0));\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    // gl_Position = u_Mvp * (vec4(project_pos.xy + offset, a_Size.y, 1.0));\n    gl_Position = u_Mvp * (vec4(project_pos.xy + offset, a_Size.y / 10.0, 1.0)); // \u989D\u5916\u9664 10.0 \u662F\u4E3A\u4E86\u548Cgaode1.x\u7684\u9AD8\u5EA6\u517C\u5BB9\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, a_Size.y, 1.0));\n  }\n\n  setPickingColor(a_PickingColor);\n}\n";
var lineStyleObj = {
  solid: 0.0,
  dash: 1.0
};

var LineModel = function (_BaseModel) {
  _inherits(LineModel, _BaseModel);

  var _super = _createSuper(LineModel);

  function LineModel() {
    var _this;

    _classCallCheck(this, LineModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.texture = void 0;

    _this.updateTexture = function () {
      var createTexture2D = _this.rendererService.createTexture2D;

      if (_this.texture) {
        _this.texture.update({
          data: _this.iconService.getCanvas()
        });

        _this.layer.render();

        return;
      }

      _this.texture = createTexture2D({
        data: _this.iconService.getCanvas(),
        mag: gl.NEAREST,
        min: gl.NEAREST,
        premultiplyAlpha: false,
        width: 1024,
        height: _this.iconService.canvasHeight || 128
      });
    };

    return _this;
  }

  _createClass(LineModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          opacity = _ref.opacity,
          _ref$lineType = _ref.lineType,
          lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,
          _ref$dashArray = _ref.dashArray,
          dashArray = _ref$dashArray === void 0 ? [10, 5, 0, 0] : _ref$dashArray,
          _ref$lineTexture = _ref.lineTexture,
          lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,
          _ref$iconStep = _ref.iconStep,
          iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep;

      if (dashArray.length === 2) {
        dashArray.push(0, 0);
      }

      if (this.rendererService.getDirty()) {
        this.texture.bind();
      }

      return {
        u_opacity: opacity || 1.0,
        u_line_type: lineStyleObj[lineType],
        u_dash_array: dashArray,
        u_texture: this.texture,
        u_line_texture: lineTexture ? 1.0 : 0.0,
        u_icon_step: iconStep,
        u_textSize: [1024, this.iconService.canvasHeight || 128]
      };
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      var _ref2 = this.layer.getLayerConfig(),
          animateOption = _ref2.animateOption;

      return {
        u_aimate: this.animateOption2Array(animateOption),
        u_time: this.layer.getLayerAnimateTime()
      };
    }
  }, {
    key: "initModels",
    value: function initModels() {
      this.updateTexture();
      this.iconService.on('imageUpdate', this.updateTexture);
      return this.buildModels();
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      if (this.texture) {
        this.texture.destroy();
      }

      this.iconService.off('imageUpdate', this.updateTexture);
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return [this.layer.buildLayerModel({
        moduleName: 'line',
        vertexShader: line_vert,
        fragmentShader: line_frag,
        triangulation: LineTriangulation,
        primitive: gl.TRIANGLES,
        blend: this.getBlend(),
        depth: {
          enable: false
        }
      })];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var _this2 = this;

      var _ref3 = this.layer.getLayerConfig(),
          _ref3$lineType = _ref3.lineType,
          lineType = _ref3$lineType === void 0 ? 'solid' : _ref3$lineType;

      this.styleAttributeService.registerStyleAttribute({
        name: 'distance',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Distance',
          buffer: {
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[3]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'total_distance',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Total_Distance',
          buffer: {
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[5]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var _feature$size = feature.size,
                size = _feature$size === void 0 ? 1 : _feature$size;
            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'normal',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal',
          buffer: {
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return normal;
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'miter',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Miter',
          buffer: {
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[4]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_iconMapUV',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var iconMap = _this2.iconService.getIconMap();

            var texture = feature.texture;

            var _ref4 = iconMap[texture] || {
              x: 0,
              y: 0
            },
                x = _ref4.x,
                y = _ref4.y;

            return [x, y];
          }
        }
      });
    }
  }, {
    key: "loadImage",
    value: function loadImage(url) {
      return new Promise(function (resolve, reject) {
        if (url instanceof HTMLImageElement) {
          resolve(url);
          return;
        }

        var image = new Image();
        image.crossOrigin = 'anonymous';

        image.onload = function () {
          resolve(image);
        };

        image.onerror = function () {
          reject(new Error('Could not load image at ' + url));
        };

        image.src = url instanceof File ? URL.createObjectURL(url) : url;
      });
    }
  }]);

  return LineModel;
}(BaseModel);

export { LineModel as default };
//# sourceMappingURL=line.js.map