{"version":3,"sources":["../../src/amap2/Viewport.ts"],"names":["Viewport","projectionMatrix","mat4","create","viewMatrix","viewProjectionMatrix","ViewProjectionMatrixUncentered","viewUncenteredMatrix","zoom","center","mapCamera","offsetOrigin","cameraPosition","up","lookAt","aspect","near","far","fov","perspective","Math","PI","eyePoint","vec3","fromValues","lookAtPoint","upDirect","clone","translate","multiply","lng","lat","lngLat","scale","maxs","max","min","zoomScale","d","x","y","log","tan","a","b","c"],"mappings":"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","sourcesContent":["import { IMapCamera, IViewport } from '@antv/l7-core';\nimport { mat4, vec3 } from 'gl-matrix';\nexport default class Viewport implements IViewport {\n  private projectionMatrix: mat4 = mat4.create();\n  private viewMatrix: mat4 = mat4.create();\n  private viewProjectionMatrix: mat4 = mat4.create();\n  private ViewProjectionMatrixUncentered: mat4 = mat4.create();\n  private viewUncenteredMatrix: mat4 = mat4.create();\n  private zoom: number;\n  private center: number[];\n\n  public syncWithMapCamera(mapCamera: Partial<IMapCamera>) {\n    const {\n      zoom = 1,\n      center = [0, 0],\n      offsetOrigin = [0, 0],\n      cameraPosition = [0, 0, 0],\n      up = [0, 1, 0],\n      lookAt = [0, 0, 0],\n      aspect = 1,\n      near = 0.1,\n      far = 1000,\n      fov = 45,\n      // @ts-ignore\n      // left,\n      // right,\n      // bottom,\n      // top,\n    } = mapCamera;\n    this.zoom = zoom;\n    this.center = center;\n\n    // 计算透视投影矩阵 projectionMatrix\n    mat4.perspective(\n      this.projectionMatrix,\n      (fov / 180) * Math.PI,\n      aspect,\n      near,\n      far,\n    );\n\n    // ortho(out, left, right, bottom, top, near, far)\n    // mat4.ortho(this.projectionMatrix, left, right, bottom, top, near, far)\n    // console.log(left, right, bottom, top, near, far)\n    // 计算相机矩阵 viewMatrix\n    // console.log(cameraPosition)\n    const eyePoint = vec3.fromValues(...cameraPosition);\n    // const eyePoint = vec3.fromValues(cameraPosition[0], cameraPosition[1], 0.1);\n    // 计算相机矩阵 viewMatrix\n\n    const lookAtPoint = vec3.fromValues(...lookAt);\n    // const lookAtPoint = vec3.fromValues(...cameraPosition);\n    // const lookAtPoint = vec3.fromValues(cameraPosition[0], cameraPosition[1], -0.1);\n    // const lookAtPoint = vec3.fromValues(0, 0, 0);\n\n    const upDirect = vec3.fromValues(...up);\n    // const upDirect = vec3.fromValues(0, 1, 0);\n    mat4.lookAt(this.viewMatrix, eyePoint, lookAtPoint, upDirect);\n\n    this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n\n    // 移动相机位置\n    mat4.translate(\n      this.viewMatrix,\n      this.viewMatrix,\n      vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0),\n    );\n\n    mat4.multiply(\n      this.viewProjectionMatrix,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n    mat4.multiply(\n      this.ViewProjectionMatrixUncentered,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n  }\n\n  public getZoom(): number {\n    return this.zoom;\n  }\n\n  public getZoomScale(): number {\n    // 512 尺寸下的缩放：2 ^ 20\n    return 1048576;\n  }\n\n  public getCenter(): [number, number] {\n    const [lng, lat] = this.center;\n    return [lng, lat];\n  }\n\n  public getProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.projectionMatrix;\n  }\n\n  public getViewMatrix(): number[] {\n    // @ts-ignore\n    return this.viewMatrix;\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.viewUncenteredMatrix;\n  }\n  public getViewProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.viewProjectionMatrix;\n  }\n\n  public getViewProjectionMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.ViewProjectionMatrixUncentered;\n  }\n\n  public getFocalDistance() {\n    return 1;\n  }\n\n  /**\n   * P20 坐标系，固定 scale\n   */\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    const maxs = 85.0511287798;\n    const lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);\n    // tslint:disable-next-line:no-bitwise\n    const zoomScale = 256 << 20;\n    let d = Math.PI / 180;\n    let x = lngLat[0] * d;\n    let y = lat * d;\n    y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n    const a = 0.5 / Math.PI;\n    const b = 0.5;\n    const c = -0.5 / Math.PI;\n    d = 0.5;\n    x = zoomScale * (a * x + b) - 215440491;\n    y = -(zoomScale * (c * y + d) - 106744817);\n    return [x, y];\n  }\n}\n"],"file":"Viewport.js"}